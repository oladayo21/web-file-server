name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: Install dependencies
        run: pnpm install

      - name: Run checks
        run: pnpm check

      - name: Build
        run: pnpm build

      - name: Bump version
        id: version
        run: |
          NEW_VERSION=$(pnpm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # Determine if this is a prerelease
          if [[ "$NEW_VERSION" == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "tag=beta" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Release ${{ steps.version.outputs.new_version }}"

      - name: Publish to npm
        run: |
          if [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            pnpm publish --access public --tag ${{ steps.version.outputs.tag }}
          else
            pnpm publish --access public
          fi

      - name: Create Git tag and push
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main --tags